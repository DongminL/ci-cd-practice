pipeline {
    agent any

    environment {
        VERSION = sh(script: 'git rev-parse --short HEAD', returnStdout: true).trim()
        DOCKER_IMAGE = "${DOCKER_REGISTRY}/test:${VERSION}"
    }

    stages {
        stage ('Git clone') {
            steps {
                git branch: 'main', credentialsId: 'github-access-token',
                url: 'https://github.com/DongminL/ci-cd-practice.git'
            }
        }

        stage ('Gradle Build') {
            steps {
                sh '''
                    chmod +x gradlew
                    ./gradlew clean bootJar
                '''
            }
        }

        stage ('Docker Image Build') {
            steps {
                sh '''
                    docker build -t test .
                    docker tag test ${DOCKER_IMAGE}

                    export CR_PAT=${GITHUB_TOKEN}
                    echo \$CR_PAT | docker login ghcr.io -u ${GITHUB_ID} --password-stdin

                    docker push ${DOCKER_IMAGE}

                    docker rmi -f ${DOCKER_IMAGE}
                '''
            }
        }

        stage ('Deploy') {
            steps {
                sshagent (credentials: ['ssh']) {
                    sh '''
                        ssh -o StrictHostKeyChecking=no ${API_SERVER_USER}@${API_SERVER_IP} "docker login ghcr.io -u ${GITHUB_ID} --password ${GITHUB_TOKEN}"

                        ssh -o StrictHostKeyChecking=no ${API_SERVER_USER}@${API_SERVER_IP} "docker pull ${DOCKER_IMAGE}"

                        ssh -o StrictHostKeyChecking=no ${API_SERVER_USER}@${API_SERVER_IP} "docker stop test || true"
                        ssh -o StrictHostKeyChecking=no ${API_SERVER_USER}@${API_SERVER_IP} "docker rm test || true"

                        ssh -o StrictHostKeyChecking=no ${API_SERVER_USER}@${API_SERVER_IP} "docker run -d --name test -p 8080:8080 ${DOCKER_IMAGE}"

                        ssh -o StrictHostKeyChecking=no ${API_SERVER_USER}@${API_SERVER_IP} "docker system prune -a -f || true"
                    '''
                }
            }
        }
    }
}